---
# Source: crds/kubernetes-client.io_externalsecrets_crd.yaml
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: externalsecrets.kubernetes-client.io
  annotations:
    # for helm v2 backwards compatibility
    helm.sh/hook: crd-install
    # used in e2e testing
    app.kubernetes.io/managed-by: helm
spec:
  group: kubernetes-client.io
  version: v1
  scope: Namespaced

  names:
    shortNames:
      - es
    kind: ExternalSecret
    plural: externalsecrets
    singular: externalsecret

  additionalPrinterColumns:
    - JSONPath: .status.lastSync
      name: Last Sync
      type: date
    - JSONPath: .status.status
      name: status
      type: string
    - JSONPath: .metadata.creationTimestamp
      name: Age
      type: date

  validation:
    openAPIV3Schema:
      properties:
        spec:
          type: object
          properties:
            template:
              description: Template which will be deep merged without mutating
                any existing fields. into generated secret, can be used to
                set for example annotations or type on the generated secret
              type: object
            backendType:
              type: string
              enum:
                - secretsManager
                - systemManager
                - vault
                - azureKeyVault
                - gcpSecretsManager
                - alicloudSecretsManager
            vaultRole:
              type: string
            vaultMountPoint:
              type: string
            kvVersion:
              description: Vault K/V version either 1 or 2, default = 2
              type: integer
              minimum: 1
              maximum: 2
            keyVaultName:
              type: string
            key:
              type: string
            dataFrom:
              type: array
              items:
                type: string
            data:
              type: array
              items:
                type: object
                properties:
                  key:
                    description: Secret key in backend
                    type: string
                  name:
                    description: Name set for this key in the generated secret
                    type: string
                  property:
                    description: Property to extract if secret in backend is a JSON object
                  isBinary:
                    description: >-
                      Whether the backend secret shall be treated as binary data
                      represented by a base64-encoded string. You must set this to true
                      for any base64-encoded binary data in the backend - to ensure it
                      is not encoded in base64 again. Default is false.
                    type: boolean
                required:
                  - name
                  - key
            roleArn:
              type: string
          oneOf:
            - properties:
                backendType:
                  enum:
                    - secretsManager
                    - systemManager
            - properties:
                backendType:
                  enum:
                    - vault
            - properties:
                backendType:
                  enum:
                    - azureKeyVault
              required:
                - keyVaultName
            - properties:
                backendType:
                  enum:
                    - gcpSecretsManager
            - properties:
                backendType:
                  enum:
                    - alicloudSecretsManager
          anyOf:
            - required:
                - data
            - required:
                - dataFrom
  subresources:
    status: {}

---
# Source: kubernetes-external-secrets/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kubernetes-external-secrets
  namespace: "external-secrets"
  annotations: 
    iam.gke.io/gcp-service-account: secretmanager-secret-accessor@benhuston-anthos-admin-001.iam.gserviceaccount.com
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-6.1.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
---
# Source: kubernetes-external-secrets/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: external-secrets-kubernetes-external-secrets
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-6.1.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["create", "update"]
  - apiGroups: [""]
    resources: ["namespaces"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    resourceNames: ["externalsecrets.kubernetes-client.io"]
    verbs: ["get", "update"]
  - apiGroups: ["kubernetes-client.io"]
    resources: ["externalsecrets"]
    verbs: ["get", "watch", "list"]
  - apiGroups: ["kubernetes-client.io"]
    resources: ["externalsecrets/status"]
    verbs: ["get", "update"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["create"]
---
# Source: kubernetes-external-secrets/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-kubernetes-external-secrets
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-6.1.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: external-secrets-kubernetes-external-secrets
subjects:
  - name: kubernetes-external-secrets
    namespace: "external-secrets"
    kind: ServiceAccount
---
# Source: kubernetes-external-secrets/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: external-secrets-kubernetes-external-secrets-auth
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-6.1.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
- name: kubernetes-external-secrets
  namespace: "external-secrets"
  kind: ServiceAccount
---
# Source: kubernetes-external-secrets/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: external-secrets-kubernetes-external-secrets
  namespace: "external-secrets"
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-6.1.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
spec:
  selector:
    app.kubernetes.io/name: kubernetes-external-secrets
  ports:
    - protocol: TCP
      port: 3001
      name: prometheus
      targetPort: prometheus
---
# Source: kubernetes-external-secrets/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: external-secrets-kubernetes-external-secrets
  namespace: "external-secrets"
  labels:
    app.kubernetes.io/name: kubernetes-external-secrets
    helm.sh/chart: kubernetes-external-secrets-6.1.0
    app.kubernetes.io/instance: external-secrets
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: kubernetes-external-secrets
      app.kubernetes.io/instance: external-secrets
  template:
    metadata:
      labels:
        app.kubernetes.io/name: kubernetes-external-secrets
        app.kubernetes.io/instance: external-secrets
    spec:
      serviceAccountName: kubernetes-external-secrets
      containers:
        - name: kubernetes-external-secrets
          image: "ghcr.io/external-secrets/kubernetes-external-secrets:6.1.0"
          ports:
          - name: prometheus
            containerPort: 3001
          imagePullPolicy: IfNotPresent
          resources:
            {}
          env:
          - name: "AWS_DEFAULT_REGION"
            value: "us-east-1"
          - name: "AWS_REGION"
            value: "us-east-1"
          - name: "GOOGLE_APPLICATION_CREDENTIALS"
            value: "/app/gcp-creds/gcp-creds.json"
          - name: "LOG_LEVEL"
            value: "info"
          - name: "LOG_MESSAGE_KEY"
            value: "msg"
          - name: "METRICS_PORT"
            value: "3001"
          - name: "POLLER_INTERVAL_MILLISECONDS"
            value: "10000"
          - name: "VAULT_ADDR"
            value: "http://127.0.0.1:8200"
          - name: "WATCH_TIMEOUT"
            value: "60000"
          # Params for env vars populated from k8s secrets
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                name: "aws-credentials"
                key: "id"
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                name: "aws-credentials"
                key: "key"
          volumeMounts:
          - name: gcp-creds
            mountPath: /app/gcp-creds
            readOnly: true
      securityContext:
        runAsNonRoot: true
      volumes:
      - name: gcp-creds
        secret:
          secretName: gcp-creds
